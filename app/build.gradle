apply plugin: 'com.android.application'
apply plugin: "kotlin-android"
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'bugly'

bugly {
    appId = "${getProperty(getProperties('../local.properties'), 'BUGLY_APPID')}"
    appKey = "04ab39c8-86fc-4ed6-b28b-6fdfee6e19d9"
}

repositories {
    maven {
        url 'https://maven.google.com'
    }
}

ext {
    supportLibVersion = '26.1.0'
}

android {
    compileSdkVersion 26
    buildToolsVersion '27.0.3'


    defaultConfig {
        applicationId "remix.myplayer"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 82
        versionName "1.3.6.1"
        flavorDimensions "default"
        vectorDrawables.useSupportLibrary = true
        ndk {
//            abiFilters 'armeabi-v7a'
            abiFilters 'armeabi-v7a', 'x86'
        }
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        multiDexEnabled true

        buildConfigField("String", "LASTFM_API_KEY", "\"${getProperty(getProperties('../local.properties'), 'LASTFM_API_KEY')}\"")
        buildConfigField("String", "GOOGLE_PLAY_LICENSE_KEY", "\"${getProperty(getProperties('../local.properties'), 'GOOGLE_PLAY_LICENSE_KEY')}\"")
        buildConfigField("String", "BUGLY_APPID", "\"${getProperty(getProperties('../local.properties'), 'BUGLY_APPID')}\"")
        buildConfigField("String", "GITHUB_SECRET_KEY", "\"${getProperty(getProperties('../local.properties'), 'GITHUB_SECRET_KEY')}\"")
    }

    signingConfigs {
        debug {
            storeFile file("./Debug.jks")
            storePassword "123456"
            keyAlias "Debug"
            keyPassword "123456"
        }
        release {
            def properties = new Properties()
            properties.load(file('../local.properties').newDataInputStream())
            keyAlias properties['keystore.keyAlias']
            keyPassword properties['keystore.keyPassword']
            storeFile file(properties['keystore.storeFile'])
            storePassword properties['keystore.storePassword']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
            debuggable true
            minifyEnabled false
        }
        release {
            //混淆代码
            minifyEnabled true
            debuggable false
            zipAlignEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "APlayer_v${defaultConfig.versionName}_${variant.productFlavors[0].name}_${releaseTime()}.apk"
                }
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    productFlavors {
//        tencent{}
//        alibaba{}
//        meizu{}
//        assistant91{}
//        baidu{}
//        anzhuomarket{}

//        chuizi{}
//        qihu360{}
//        xiaomi{}
        kuan {}
//        google{}
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'MissingTranslation'
        disable 'InvalidPackage'
    }

//    packagingOptions {
//        exclude 'META-INF/rxjava.properties'
//    }

//    configurations {
//        implementation.exclude module: 'okio'
//        implementation.exclude module: 'gson'
//    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion "$supportLibVersion"
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    implementation "com.android.support:appcompat-v7:$supportLibVersion"
    implementation "com.android.support:design:$supportLibVersion"
    implementation "com.android.support:palette-v7:$supportLibVersion"
    implementation "com.android.support:cardview-v7:$supportLibVersion"
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.facebook.fresco:fresco:1.9.0'
    implementation 'com.facebook.rebound:rebound:0.3.8'
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'
    implementation 'com.soundcloud.android:android-crop:1.0.1@aar'
    implementation 'com.jakewharton:butterknife:8.8.1'
    implementation 'com.github.promeg:tinypinyin:2.0.1'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.13'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar'
    implementation 'org.jetbrains.anko:anko-common:0.10.4'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
    kapt  'com.jakewharton:butterknife-compiler:8.8.1'

    implementation 'com.tencent.bugly:crashreport:2.6.6.1'
    implementation 'com.anjlab.android.iab.v3:library:1.0.44'
}

def releaseTime() {
    return new Date().format("yyyy-MM-dd HH-mm")
}

def getProperties(String fileName) {
    final def Properties properties = new Properties()
    def file = file(fileName)
    if (file.exists()) {
        file.withInputStream { stream -> properties.load(stream) }
    }
    return properties
}

def getProperty(Properties properties, String name) {
    return properties.getProperty(name) ?: "$name missing"
}

kapt {
    generateStubs = true
}

